<?php

declare(strict_types=1);

namespace Netgen\Bundle\LayoutsRemoteMediaBundle\Command;

use Netgen\Layouts\API\Service\BlockService;
use Netgen\Layouts\API\Service\LayoutService;
use Netgen\Layouts\API\Values\Block\Block;
use Netgen\Layouts\API\Values\Collection\Item;
use Netgen\Layouts\API\Values\Layout\Layout;
use Netgen\Layouts\Exception\Validation\ValidationException;
use Netgen\Layouts\Persistence\Handler\CollectionHandlerInterface;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Helper\ProgressBar;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

use function array_shift;
use function count;
use function dump;
use function explode;
use function implode;
use function sprintf;

class MigrateDataV1ToV2Command2 extends Command
{
    private const REMOTE_MEDIA_BLOCK_DEFINITION = 'remote_media';

    private const REMOTE_MEDIA_ITEM_DEFINITION = 'remote_media';

    private const REMOTE_MEDIA_BLOCK_VALUE_PARAMETER_NAME = 'remote_media';

    private LayoutService $layoutService;

    private BlockService $blockService;

    private CollectionHandlerInterface $collectionHandler;

    private OutputInterface $output;

    public function __construct(
        LayoutService $layoutService,
        BlockService $blockService,
        CollectionHandlerInterface $collectionHandler
    ) {
        $this->layoutService = $layoutService;
        $this->blockService = $blockService;
        $this->collectionHandler = $collectionHandler;

        parent::__construct();
    }

    protected function configure()
    {
        $this
            ->setName('netgen-layouts:remote-media:migrate-v1-to-v2')
            ->setDescription('This command will migrate all the existing blocks and items from v1 to v2');
    }

    protected function initialize(InputInterface $input, OutputInterface $output)
    {
        $this->output = $output;
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $layouts = $this->loadLayouts();
        $progressBar = new ProgressBar($output, count($layouts));

        $output->writeln(sprintf('Processing %d layouts:', count($layouts)));
        $progressBar->start();

        foreach ($progressBar->iterate($layouts) as $layout) {
            $this->processLayout($layout);
        }

        $progressBar->finish();
    }

    /** @return \Netgen\Layouts\API\Values\Layout\Layout[] */
    private function loadLayouts(): array
    {
        $limit = 100;
        $offset = 0;
        $layouts = [];

        do {
            $layoutsResult = $this->layoutService->loadLayouts(true, $offset, $limit);

            foreach ($layoutsResult->getLayouts() as $layout) {
                $layouts[] = $layout;
            }

            $offset += $limit;
        } while ($layoutsResult->count() > 0);

        return $layouts;
    }

    private function processLayout(Layout $layout): void
    {
        $layoutDraft = $this->layoutService->createDraft($layout, true);

        $this->migrateBlocks($layoutDraft);
        $this->migrateItems($layoutDraft);

        $this->layoutService->publishLayout($layoutDraft);
    }

    private function convertValue(string $value): string
    {
        $valueParts = explode('|', $value);
        $type = 'upload';
        $resourceType = array_shift($valueParts);
        $resourceId = implode('|', $valueParts);

        return implode('||', [$type, $resourceType, $resourceId]);
    }

    /** @return \Netgen\Layouts\API\Values\Block\Block[] */
    private function loadBlocks(Layout $layout): array
    {
        $blocks = [];
        foreach ($this->blockService->loadLayoutBlocks($layout) as $block) {
            if ($block->getDefinition()->getIdentifier() === self::REMOTE_MEDIA_BLOCK_DEFINITION) {
                $blocks[] = $block;
            }
        }

        return $blocks;
    }

    private function processBlock(Block $block): void
    {
        $blockUpdateStruct = $this->blockService->newBlockUpdateStruct($block->getLocale(), $block);

        $blockUpdateStruct->setParameterValue(
            self::REMOTE_MEDIA_BLOCK_VALUE_PARAMETER_NAME,
            $this->convertValue(
                $block->getParameter(self::REMOTE_MEDIA_BLOCK_VALUE_PARAMETER_NAME)->getValue(),
            ),
        );

        try {
            $this->blockService->updateBlock($block, $blockUpdateStruct);

            return;
        } catch (ValidationException $e) {
        }

        $this->output->writeln(
            sprintf(
                '<error>Failed to migrate block %s in layout %s for reason: %s. Setting value to empty...</error>',
                $block->getId()->toString(),
                $block->getLayoutId()->toString(),
                $e->getMessage(),
            ),
        );

        $blockUpdateStruct->setParameterValue(
            self::REMOTE_MEDIA_BLOCK_VALUE_PARAMETER_NAME,
            null,
        );

        $this->blockService->updateBlock($block, $blockUpdateStruct);
    }

    private function migrateBlocks(Layout $layout): void
    {
        foreach ($this->loadBlocks($layout) as $block) {
            $this->processBlock($block);
        }
    }

    /** @return \Netgen\Layouts\API\Values\Collection\Item[] */
    private function loadItems(Block $block): array
    {
        $collections = $this->collectionHandler->loadCollections($block);

        $items = [];
        foreach ($collections as $collection) {
            $items = $this->collectionHandler->loadCollectionItems($collection);

            foreach ($items as $item) {
                if ($item->valueType === self::REMOTE_MEDIA_ITEM_DEFINITION) {
                    $items[] = $item;
                }
            }
        }

        return $items;
    }

    private function processItem(Item $item): void
    {
        dump($item);

        exit;
    }

    private function migrateItems(Layout $layout): void
    {
        foreach ($this->blockService->loadLayoutBlocks($layout) as $block) {
            foreach ($this->loadItems($block) as $item) {
                $this->processItem($item);
            }
        }
    }
}
